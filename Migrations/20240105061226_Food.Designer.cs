// <auto-generated />
using System;
using AuthReadyAPI.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthReadyAPI.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20240105061226_Food")]
    partial class Food
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.Companies.CompanyClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointOfContactId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.Companies.CompanyImageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyImages");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.Companies.CompanyTransactionClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AuthReadyNet")
                        .HasColumnType("float");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CompanyNet")
                        .HasColumnType("float");

                    b.Property<DateTime>("DepositTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepositedToCompany")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("SaleGross")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeOfTransaction")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyTransactions");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.Companies.PointOfContactClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointOfContacts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.APIUserClass", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LifetimeSpent")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MailingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.AuctionProductCartClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("AuctionCarts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.BidClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("AuctionProductClassId")
                        .HasColumnType("int");

                    b.Property<int>("AuctionProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Submitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionProductClassId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.OrderClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionProductCartClassId")
                        .HasColumnType("int");

                    b.Property<string>("CartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PaymentRefunded")
                        .HasColumnType("bit");

                    b.Property<int>("ServicesCartClassId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int>("SingleProductCartClassId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.PreparedCartClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("CartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PreparedCarts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ServicesCartClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("CouponApplied")
                        .HasColumnType("bit");

                    b.Property<int>("CouponCodeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceAfterCoupon")
                        .HasColumnType("float");

                    b.Property<double>("PriceBeforeCoupon")
                        .HasColumnType("float");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCarts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ShippingInfoClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("DeliveryExpectation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFlatRate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeighed")
                        .HasColumnType("bit");

                    b.Property<double>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderClassId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderClassId");

                    b.ToTable("ShippingInfoClass");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ShoppingCartClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("CouponApplied")
                        .HasColumnType("bit");

                    b.Property<int>("CouponCodeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceAfterCoupon")
                        .HasColumnType("float");

                    b.Property<double>("PriceBeforeCoupon")
                        .HasColumnType("float");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.SingleProductCartClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Abandoned")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("SingleProductCarts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptAutoSell")
                        .HasColumnType("bit");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("AuctionEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("AutoSellBidAmount")
                        .HasColumnType("float");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentBidAmount")
                        .HasColumnType("float");

                    b.Property<string>("CurrentBidderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBeenPurchased")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<double>("StartingBidAmount")
                        .HasColumnType("float");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AuctionProducts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductImageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuctionProductClassId")
                        .HasColumnType("int");

                    b.Property<int>("AuctionProductId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionProductClassId");

                    b.ToTable("AuctionProductImages");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.CartItemClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DigitalOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PackagedDimensions")
                        .HasColumnType("float");

                    b.Property<double>("PackagedWeight")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartClassId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartClassId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.CategoryClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.DigitalOwnershipClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activated")
                        .HasColumnType("bit");

                    b.Property<string>("DigitalOwnerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<int?>("OrderClassId")
                        .HasColumnType("int");

                    b.Property<string>("ProductKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderClassId");

                    b.ToTable("DigitalOwnerShips");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatesMade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductImageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StyleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductUpsellItemClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuctionProductCartClassId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CostWithShipping")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DigitalOnly")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingCartClassId")
                        .HasColumnType("int");

                    b.Property<int?>("SingleProductCartClassId")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionProductCartClassId");

                    b.HasIndex("ShoppingCartClassId");

                    b.HasIndex("SingleProductCartClassId");

                    b.ToTable("ProductUpsells");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductWithStyleClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingInfoClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShippingInfoClassId");

                    b.ToTable("ProductWithStyleClass");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBeenPurchased")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("ShippingCost")
                        .HasColumnType("float");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SingleProducts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductImageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SingleProductClassId")
                        .HasColumnType("int");

                    b.Property<int>("SingleProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SingleProductClassId");

                    b.ToTable("SingleProductImages");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.StyleClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartCount")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DigitalOnly")
                        .HasColumnType("bit");

                    b.Property<int>("DigitalOwnerId")
                        .HasColumnType("int");

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<double>("GrossIncome")
                        .HasColumnType("float");

                    b.Property<bool>("IsAvailableForOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComingSoon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedTimeOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<double>("PackagedDimensions")
                        .HasColumnType("float");

                    b.Property<double>("PackagedWeight")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductWithStyleClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UnavailableOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseDiscountPrice")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductWithStyleClassId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.AppointmentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomerShowed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfAppointment")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServicesCartClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicesCartClassId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.ServiceProductClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentClassId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentClassId");

                    b.ToTable("ServiceProducts");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.ServicesClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentClassId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UseDiscountedPrice")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentClassId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6ad89246-1021-42b0-a0f4-72957c88181b",
                            Name = "Company",
                            NormalizedName = "COMPANY"
                        },
                        new
                        {
                            Id = "d5e03702-6500-4dd0-861a-131ab483b480",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4569a37a-372e-4124-b13d-05319958dd37",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.AuctionProductCartClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductClass", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.BidClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductClass", null)
                        .WithMany("Bids")
                        .HasForeignKey("AuctionProductClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ShippingInfoClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.OrderClass", null)
                        .WithMany("ShippingInfos")
                        .HasForeignKey("OrderClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.SingleProductCartClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductClass", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductImageClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductClass", null)
                        .WithMany("Images")
                        .HasForeignKey("AuctionProductClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.CartItemClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.ShoppingCartClass", null)
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.DigitalOwnershipClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.OrderClass", null)
                        .WithMany("DigitalOwnerships")
                        .HasForeignKey("OrderClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductUpsellItemClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.AuctionProductCartClass", null)
                        .WithMany("Upsells")
                        .HasForeignKey("AuctionProductCartClassId");

                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.ShoppingCartClass", null)
                        .WithMany("Upsells")
                        .HasForeignKey("ShoppingCartClassId");

                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.SingleProductCartClass", null)
                        .WithMany("Upsells")
                        .HasForeignKey("SingleProductCartClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductWithStyleClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductClass", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.ShippingInfoClass", null)
                        .WithMany("PackingList")
                        .HasForeignKey("ShippingInfoClassId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductImageClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductClass", null)
                        .WithMany("Images")
                        .HasForeignKey("SingleProductClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.StyleClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductWithStyleClass", null)
                        .WithMany("Styles")
                        .HasForeignKey("ProductWithStyleClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.AppointmentClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.ServicesCartClass", null)
                        .WithMany("Appointments")
                        .HasForeignKey("ServicesCartClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.ServiceProductClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ServicesInfo.AppointmentClass", null)
                        .WithMany("Products")
                        .HasForeignKey("AppointmentClassId");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.ServicesClass", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.ServicesInfo.AppointmentClass", null)
                        .WithMany("Services")
                        .HasForeignKey("AppointmentClassId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.APIUserClass", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.APIUserClass", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.APIUserClass", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthReadyAPI.DataLayer.Models.PII.APIUserClass", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.AuctionProductCartClass", b =>
                {
                    b.Navigation("Upsells");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.OrderClass", b =>
                {
                    b.Navigation("DigitalOwnerships");

                    b.Navigation("ShippingInfos");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ServicesCartClass", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ShippingInfoClass", b =>
                {
                    b.Navigation("PackingList");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.ShoppingCartClass", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Upsells");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.PII.SingleProductCartClass", b =>
                {
                    b.Navigation("Upsells");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.AuctionProductClass", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.ProductWithStyleClass", b =>
                {
                    b.Navigation("Styles");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ProductInfo.SingleProductClass", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("AuthReadyAPI.DataLayer.Models.ServicesInfo.AppointmentClass", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
